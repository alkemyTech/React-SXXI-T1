{"version":3,"file":"static/js/455.545a36c5.chunk.js","mappings":"oSAwBA,EArByB,SAAH,GAAgC,IAA1BA,EAAkB,EAAlBA,mBAC1B,GAAoCC,EAAAA,EAAAA,UAAS,IAAG,eAAzCC,EAAU,KAAEC,EAAa,KAUhC,OACE,SAACC,EAAA,EAAW,CACVF,WAAYA,EACZG,YAAY,sBACZC,aAZ4B,SAACJ,GAC/BC,EAAcD,EAChB,EAWIK,SAT4B,WAC9BP,EAAmBE,EACrB,GAUF,E,oBCgCA,EA5CuB,WACrB,IAYIM,EAZJ,ECH2B,WAC3B,OAA4CP,EAAAA,EAAAA,UAAS,IAAG,eAAjDQ,EAAc,KAAEC,EAAiB,KACxC,GAAkDT,EAAAA,EAAAA,WAAS,GAAK,eAAzDU,EAAiB,KAAEC,EAAoB,KAExCC,EAAe,yCAAG,2GAI4B,OAJrBC,EAAM,+BAAG,CAAC,EAAC,SAEtCF,GAAqB,GACfG,GAAcC,EAAAA,EAAAA,GAAkBF,GAChCG,EAAQ,UAAMC,EAAAA,EAAAA,SAAa,YAAIH,GAAW,SACfI,EAAAA,EAAAA,IAAkBF,GAAU,KAAD,EAApC,KAAlBG,EAAkB,SAEGA,EAAmBC,QAAO,uBAC7C,IAAIC,MAAMF,EAAmBG,SAAS,KAAD,GAG7Cb,EAAkBU,EAAmBI,MAAM,mDAE3CC,EAAAA,EAAAA,GAAa,SAAU,QAAQ,GAAD,OAAKC,EAAAA,EAAAA,uBAA8C,QAErD,OAFqD,UAEjFd,GAAqB,GAAO,6EAE/B,kBAjBoB,mCAuBrB,OAJAe,EAAAA,EAAAA,YAAU,WACRd,GACF,GAAG,IAEI,CAAEF,kBAAAA,EAAmBF,eAAAA,EAAgBI,gBAAAA,EAC9C,CDzBiEe,GAAvDjB,EAAiB,EAAjBA,kBAAmBF,EAAc,EAAdA,eAAgBI,EAAe,EAAfA,gBAErCgB,EAAuB,yCAAG,WAAO3B,GAAU,4EAK9C,OAJK4B,EAAc,CAAC,EAEjB5B,EAAW6B,QAAU,IACvBD,EAAoB,OAAI5B,GACzB,SAEKW,EAAgBiB,GAAa,KAAD,sCACnC,gBAR4B,sCA4B7B,OAhBEtB,EADEG,GACkB,SAACqB,EAAA,EAAW,IAG9BvB,EAAesB,OAAS,EACtBtB,EAAewB,KAAI,SAACC,GAAQ,OAC1B,gBAAuBC,UAAU,oCAAmC,UAClE,SAACC,EAAA,EAAU,CAACC,SAAUH,EAAUI,GAAE,UAAKC,EAAAA,EAAAA,WAAiB,YAAIL,EAASM,IAAMC,KAAK,eADxEP,EAASM,GAEb,KAGR,gBAAKL,UAAU,2CAA0C,UACvD,SAACO,EAAA,EAAkB,CAACC,WAAW,aAAaC,KAAK,oCAMvD,iBAAKT,UAAU,YAAW,WACxB,gBAAKA,UAAU,OAAM,UACnB,SAACU,EAAA,EAAW,CAACC,eAAe,6BAA6BC,MAAM,mBAEjE,gBAAKZ,UAAU,OAAM,UACnB,SAAC,EAAgB,CAACnC,mBAAoB6B,OAExC,gBAAKM,UAAU,mDAAkD,SAAE3B,MAGzE,C","sources":["views/Activities/components/SearchActivities.jsx","views/Activities/ActivitiesList.js","views/Activities/hooks/useActivities.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { SearchInput } from \"Components/SearchInput/SearchInput\";\n\nconst SearchActivities = ({ onSearchActivities }) => {\n  const [searchText, setSearchText] = useState(\"\");\n\n  const changeSearchTextHandler = (searchText) => {\n    setSearchText(searchText);\n  };\n\n  const searchActivitiesHandler = () => {\n    onSearchActivities(searchText);\n  };\n\n  return (\n    <SearchInput\n      searchText={searchText}\n      placeholder=\"Buscar actividad...\"\n      onChangeText={changeSearchTextHandler}\n      onSearch={searchActivitiesHandler}\n    />\n  );\n};\n\nexport default SearchActivities;\n","import React from \"react\";\n\nimport { CustomTitle } from \"Components/CustomTitle/CustomTitle\";\nimport { CustomCard } from \"Components/CustomCard/CustomCard\";\nimport { routes } from \"models/routes\";\nimport { useActivities } from \"./hooks/useActivities\";\nimport SearchActivities from \"./components/SearchActivities\";\nimport { SpinnerLoad } from \"Components/Loading/SpinnerLoad/SpinnerLoad\";\nimport { CustomAlertMessage } from \"Components/CustomAlertMessage/CustomAlertMessage\";\n\nconst ActivitiesList = () => {\n  const { loadingActivities, activitiesData, fetchActivities } = useActivities();\n\n  const searchActivitiesHandler = async (searchText) => {\n    const fetchParams = {};\n\n    if (searchText.length >= 3) {\n      fetchParams[\"search\"] = searchText;\n    }\n\n    await fetchActivities(fetchParams);\n  };\n\n  let activitiesContent;\n  if (loadingActivities) {\n    activitiesContent = <SpinnerLoad />;\n  } else {\n    activitiesContent =\n      activitiesData.length > 0 ? (\n        activitiesData.map((activity) => (\n          <div key={activity.id} className=\"col col-12 col-sm-6 col-lg-4 mb-3\">\n            <CustomCard cardInfo={activity} to={`${routes.ACTIVITIES}/${activity.id}`} grid=\"oneColumn\" />\n          </div>\n        ))\n      ) : (\n        <div className=\"col col-12 d-flex justify-content-center\">\n          <CustomAlertMessage alertClass=\"col col-10\" text=\"Sin actividades para mostrar\" />\n        </div>\n      );\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"my-5\">\n        <CustomTitle wrapTitleClass=\"d-block h-auto text-center\" title=\"Actividades\" />\n      </div>\n      <div className=\"my-5\">\n        <SearchActivities onSearchActivities={searchActivitiesHandler} />\n      </div>\n      <div className=\"d-flex flex-row flex-wrap justify-content-center\">{activitiesContent}</div>\n    </div>\n  );\n};\n\nexport default ActivitiesList;\n","import { useEffect, useState } from \"react\";\n\nimport { feedbackUser } from \"utilities/alerts/feedbackUser.util\";\nimport { requestMessagesSchema } from \"utilities/requestMessagesSchema.util\";\nimport { URLs } from \"Services/ServicesURLS\";\nimport publicService from \"Services/publicApiService\";\nimport { encodeQueryParams } from \"utilities/queryParams\";\n\nexport const useActivities = () => {\n  const [activitiesData, setActivitiesData] = useState([]);\n  const [loadingActivities, setLoadingActivities] = useState(true);\n\n  const fetchActivities = async (params = {}) => {\n    try {\n      setLoadingActivities(true);\n      const queryParams = encodeQueryParams(params);\n      const queryUrl = `${URLs.activity}?${queryParams}`;\n      const fetchingActivities = await publicService.get(queryUrl);\n\n      if (fetchingActivities && !fetchingActivities.success) {\n        throw new Error(fetchingActivities.message);\n      }\n\n      setActivitiesData(fetchingActivities.data);\n    } catch (error) {\n      feedbackUser(\"center\", \"error\", `${requestMessagesSchema.problemExistTryLater}`);\n    } finally {\n      setLoadingActivities(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchActivities();\n  }, []);\n\n  return { loadingActivities, activitiesData, fetchActivities };\n};\n"],"names":["onSearchActivities","useState","searchText","setSearchText","SearchInput","placeholder","onChangeText","onSearch","activitiesContent","activitiesData","setActivitiesData","loadingActivities","setLoadingActivities","fetchActivities","params","queryParams","encodeQueryParams","queryUrl","URLs","publicService","fetchingActivities","success","Error","message","data","feedbackUser","requestMessagesSchema","useEffect","useActivities","searchActivitiesHandler","fetchParams","length","SpinnerLoad","map","activity","className","CustomCard","cardInfo","to","routes","id","grid","CustomAlertMessage","alertClass","text","CustomTitle","wrapTitleClass","title"],"sourceRoot":""}